/**
 * Generator Component
 * 
 * Main architecture generation interface.
 * Uses shared state from App component via Outlet context.
 */

import React from 'react'
import { useOutletContext } from 'react-router-dom'
import { InputPanel } from './components/InputPanel'
import { LoadingSpinner } from './components/LoadingSpinner'
import { ErrorAlert } from './components/ErrorAlert'
import { OutputPanel } from './components/OutputPanel'

interface GeneratorContext {
  requirements: string
  setRequirements: (value: string) => void
  isGenerating: boolean
  error: string | null
  architectureData: any
  handleGenerate: () => void
  handleClear: () => void
}

const Generator: React.FC = () => {
  const {
    requirements,
    setRequirements,
    isGenerating,
    error,
    architectureData,
    handleGenerate,
    handleClear
  } = useOutletContext<GeneratorContext>()

  return (
    <div className="space-y-8">
      {/* Page Header */}
      <div className="text-center">
        <h1 className="text-4xl font-bold text-slate-100 mb-4">
          AWS Architecture Generator
        </h1>
        <p className="text-slate-400 max-w-2xl mx-auto">
          Describe your AWS infrastructure requirements and get a complete CloudFormation template, 
          architecture diagram, and cost estimate generated by AI agents.
        </p>
      </div>

      {/* Input Panel */}
      <InputPanel
        requirements={requirements}
        onRequirementsChange={setRequirements}
        onGenerate={handleGenerate}
        onClear={handleClear}
        isGenerating={isGenerating}
      />

      {/* Loading State */}
      {isGenerating && <LoadingSpinner />}

      {/* Error State */}
      {error && <ErrorAlert message={error} onDismiss={() => {}} />}

      {/* Results */}
      {architectureData && !isGenerating && (
        <OutputPanel data={architectureData} />
      )}
    </div>
  )
}

export default Generator
